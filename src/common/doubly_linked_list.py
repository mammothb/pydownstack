"""Doubly linked list."""

import functools
from dataclasses import dataclass, field
from typing import Callable, Generic, Iterator, TypeVar

T = TypeVar("T")


@dataclass
class DoublyLinkedList(Generic[T]):
    """A doubly linked list with fixed max size."""

    size: int
    curr_size: int = field(default=0, init=False)
    curr: "Node | None" = field(default=None, init=False)
    head: "Node | None" = field(default=None, init=False)
    tail: "Node | None" = field(default=None, init=False)

    def __repr__(self) -> str:
        return f"[{', '.join(map(str, (node.data for node in self)))}]"

    def __getitem__(self, index: int) -> T:
        if not 0 <= index < self.curr_size:
            raise IndexError
        node = functools.reduce(getattr, ["next"] * index, self.head)
        if node is None:
            raise IndexError
        return node.data

    def __iter__(self) -> "DoublyLinkedList":
        self.curr = self.head
        return self

    def __next__(self) -> "Node[T]":
        if self.curr is None:
            raise StopIteration
        node = self.curr
        self.curr = self.curr.next
        return node

    def __reversed__(self) -> "Iterator[Node[T]]":
        curr = self.tail
        while curr is not None:
            prev = curr
            curr = curr.prev
            yield prev

    @property
    def is_full(self) -> bool:
        """Flag to indicate if the list is full."""
        return self.curr_size == self.size

    def append(self, data: T) -> None:
        """Appends new node to the end of the list."""
        node = Node(data)
        self.curr_size += 1

        if self.head is None:
            self.head = node
            self.tail = node
            return

        assert self.tail is not None

        node.prev = self.tail
        self.tail.next = node
        self.tail = node

        if self.curr_size > self.size:
            self.popleft()

    def appendleft(self, data: T) -> None:
        """Appends new node to the start of the list."""
        node = Node(data)
        self.curr_size += 1

        if self.tail is None:
            self.head = node
            self.tail = node
            return

        assert self.head is not None

        node.next = self.head
        self.head.prev = node
        self.head = node

        if self.curr_size > self.size:
            self.pop()

    def pop(self) -> T:
        """Removes element from the right side of the list."""
        if self.tail is None:
            raise IndexError

        node = self.tail
        self.curr_size -= 1

        self.tail = node.prev
        node.prev = None

        if self.tail is None:
            self.head = None
        else:
            self.tail.next = None

        return node.data

    def popleft(self) -> T:
        """Removes element from the left side of the list."""
        if self.head is None:
            raise IndexError

        node = self.head
        self.curr_size -= 1

        self.head = node.next
        node.next = None

        if self.head is None:
            self.tail = None
        else:
            self.head.prev = None

        return node.data

    def remove(self, node: "Node[T]") -> None:
        """Removes a node."""
        if self.head is None:
            return
        if self.head == node:
            self.popleft()
            return
        if self.tail == node:
            self.pop()
            return

        assert node.next is not None and node.prev is not None
        node.next.prev = node.prev
        node.prev.next = node.next
        self.curr_size -= 1

    @classmethod
    def fill_with_default(
        cls, size: int, factory: Callable[[], T]
    ) -> "DoublyLinkedList":
        """Constructs a list with `size` and fill it will nodes containing values
        generated by `factory`.
        """
        dl_list = cls(size)
        while not dl_list.is_full:
            dl_list.append(factory())
        return dl_list


@dataclass
class Node(Generic[T]):
    """A node with a reference to its previous and next nodes."""

    data: T
    next: "Node | None" = field(default=None, init=False)
    prev: "Node | None" = field(default=None, init=False)
